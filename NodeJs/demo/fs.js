const fs = require('fs');// fs.readFile('./fs.js','utf8',(err,data) => {//    if(err) throw  err;//    console.log(data);// });//// let data = fs.readFileSync('./event.js','utf8');// console.log(data.toString());// const content = Buffer.from('this is a test');// fs.writeFile('./test.txt','this is a test',{//     encoding:'utf8'// },err =>{//     if(err) throw  err;//     console.log('write success');// });// fs.writeFile('./test1.txt',content,err =>{//     if(err) throw  err;//     console.log('write success');// });//判断文件是否存在// fs.stat('./fs.js',(err,stats) => {//     if(err) throw err;//     console.log(stats.isFile());//     console.log(stats.isDirectory());//     console.log(stats);// });//rename// fs.rename('./test.txt','test1.txt',err=>{//    if(err) throw  err;//    console.log('done');// });//unlink// fs.unlink('./test1.txt',err=>{console.log('remove file done!')});//readdir// fs.readdir('../',(err,files) => {//     if(err) throw err;//     console.log(files);// });//mkdir// fs.mkdir('test',(err) => {//     console.log('mkdir test done')// });//rmdir// fs.rmdir('test',(err) =>{console.log('remove test done')});//watch 本地构建// fs.watch('./',{//     recursive:true,// },(evenType,filename) => {//     console.log(evenType,filename);// });//readstream// const rs = fs.createReadStream('./fs.js');// rs.pipe(process.stdout);//writestreamconst ws = fs.createWriteStream('./test.txt');const timer = setInterval(() => {    const num = parseInt(Math.random() * 10);    if(num < 9){        ws.write(num + '');    }else{        clearInterval(timer);        ws.end();    }},200);ws.on('finish',() => {    console.log('done');});